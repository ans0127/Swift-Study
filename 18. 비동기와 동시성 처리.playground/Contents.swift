import UIKit
import Foundation
import PlaygroundSupport

//ÎπÑÎèôÍ∏∞ÏûëÏóÖÏúºÎ°ú Ïù∏Ìï¥ ÌîåÎ†àÏù¥Í∑∏ÎùºÏö¥Îìú Î™®Îì† ÏûëÏóÖÏù¥ ÎÅùÎÇ¨Îã§Í≥† Ïù∏ÏãùÌïòÏßÄ ÏïäÎèÑÎ°ù ÏÇ¨Ïö© - ÏûëÏóÖ Ï§ëÍ∞ÑÏóê Î©àÏ∂îÏßÄ Î™ªÌïòÍ≤å ÌïòÍ∏∞ ÏúÑÌï®
PlaygroundPage.current.needsIndefiniteExecution = true


/*==============================================================================
 ‚ú®‚ú®‚ú®‚ú®ÎèôÍ∏∞ vs ÎπÑÎèôÍ∏∞
 ==============================================================================*/
func task1( ){
    print("task 1 ÏãúÏûë")
    print("task 1 Ï¢ÖÎ£å------>")
}
func task2( ) {
    print("task 2 ÏãúÏûë")
    print("task 2 Ï¢ÖÎ£å------>")
}
func task3( ){
    print("task 3 ÏãúÏûë")
    print("task 3 Ï¢ÖÎ£å------>")
}
//task1( )
//task2( )
//task3( )

func task4(){
    print("task 4 ÏãúÏûë")
    sleep(2)
    print("task 4 Ï¢ÖÎ£å------>")
}
func task5(){
    print("task 5 ÏãúÏûë")
    sleep(2)
    print("task 5 Ï¢ÖÎ£å------>")
}
func task6(){
    print("task 6 ÏãúÏûë")
    sleep(2)
    print("task 6 Ï¢ÖÎ£å------>")
}
//ÎπÑÎèôÍ∏∞Ï≤òÎ¶¨Î•º ÌïòÏßÄÏïäÏúºÎ©¥ Î™®Îëê Ï∂úÎ†•Ïãú 6Ï¥àÏ†ïÎèÑ Í±∏Î¶º
//task4()
//task5()
//task6()


//‚ú®ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨ Î∞©Î≤ï
//DispatchQueue.global().async ( globalQueueÎ•º ÏÉùÏÑ±ÌïòÍ≥†, QueueÎ°ú Î≥¥ÎÇ∏Îã§. ) ÏÇ¨Ïö©ÌïòÎ©¥ ÎêúÎã§.
//ÎπÑÎèôÍ∏∞Îäî Í∏∞Îã§Î¶¨ÏßÄ ÏïäÍ∏∞ ÎïåÎ¨∏Ïóê Î≠êÍ∞Ä Î®ºÏ†Ä Ï∂úÎ†•Îê† ÏßÄ ÏïåÏàò ÏóÜÎã§. ÎØ∏Î¶¨ Ï≤òÎ¶¨ÎêòÎäî Í≤ÉÎì§Ïù¥ Î®ºÏ†Ä Ï∂úÎ†•Îê®
print("1")
//DispatchQueue.global().async {
//    task4()
//}
//DispatchQueue.global().async {
//    task5()
//}
//DispatchQueue.global().async {
//    task6()
//}
print("2")


//DispatchQueue.global().async Îäî ÌïòÎÇòÏùò Î¨∂ÏùåÏù¥Í∏∞ ÎïåÎ¨∏Ïóê, ÏïàÏóê Îì§Ïñ¥ÏûàÎäî Í≤ÉÎì§ÏùÄ ÌÜµÏúºÎ°ú ÌïúÎ≤àÏóê Ï∂úÎ†•ÎêúÎã§.
DispatchQueue.global().async {
    //ÌïòÎÇòÏùò Î¨∂ÏùåÏù¥Í∏∞ ÎïåÎ¨∏Ïóê ÏàúÏÑúÎåÄÎ°ú Ï∂úÎ†•Îê† Ïàò Î∞ñÏóê ÏóÜÎã§.
    print("DispatchQueue ÏïàÏóêÏÑú ÏãúÏûë 1 ")
    print("DispatchQueue ÏïàÏóêÏÑú ÏãúÏûë 2 ")
    print("DispatchQueue ÏïàÏóêÏÑú ÏãúÏûë 3 ")
    print(" Ï¢ÖÎ£å  ")
}


//ÎπÑÎèôÍ∏∞Ï†ÅÏù∏ Ìï®ÏàòÏùò Ï†ïÏùò
func task7(){
    DispatchQueue.global().async {
        print(" ÎπÑÎèôÍ∏∞Ï†Å Ìï®ÏàòÏùò Ïã§Ìñâ ! ")
         }
}
/*==============================================================================
 ‚ú®‚ú®‚ú®‚ú®ÏßÅÎ†¨ (Serial) & ÎèôÏãú (Concurrent)
 ==============================================================================*/
//ÏßÅÎ†¨ ÌÅê ÎßåÎìúÎäî Î∞©Î≤ï
let serialQueue = DispatchQueue(label: "serial")   //Î¨∏ÏûêÏó¥ÏùÄ Í∞úÎ∞úÏûê ÎßàÏùåÎåÄÎ°ú Ïì¥Îã§.
//ÏßÅÎ†¨ÌÅêÏù¥Í∏∞ ÎñÑÎ¨∏Ïóê taskÍ∞Ä ÎπÑÎèôÍ∏∞Ï†ÅÏù¥Îã§ ÌïòÎçîÎùºÎèÑ ÏàúÏÑúÎåÄÎ°ú Ï∂úÎ†•Îê®
serialQueue.async {
    //task1()
}
serialQueue.async {
   // task2()
}
serialQueue.async {
   // task3()
}

//ÎèôÏãúÌÅê
let concurrentQueue = DispatchQueue.global()
concurrentQueue.async {
//    task1()
}
concurrentQueue.async {
//    task2()
}
concurrentQueue.async {
//    task3()
}

/*==============================================================================
üí†üí†ÌÅê( Queue) Ïùò Ï¢ÖÎ•òüí†üí†
 1. Î©îÏù∏ÌÅê
 2. Í∏ÄÎ°úÎ≤åÌÅê
 3.Ïª§Ïä§ÌÖÄÌÅê
 ==============================================================================*/

//1. Î©îÏù∏ÌÅê
let mainQueue = DispatchQueue.main

//2. Í∏ÄÎ°úÎ≤åÌÅê
//6Í∞ÄÏßÄÏùò QosÎ•º Í∞ÄÏßÄÍ≥† ÏûàÏùå (default Í∏ÄÎ°úÎ≤å ÌÅêÎÇò Ïú†Ìã∏Î¶¨Ìã∞ ÌÅêÎ•º Ï£ºÎ°ú ÏÇ¨Ïö©)
let defaultQueue = DispatchQueue.global()
let defaultQueue1 = DispatchQueue.global(qos: .default)
let backgroundQueue = DispatchQueue.global(qos: .background)
let unspecifiedQueue = DispatchQueue.global(qos: .unspecified)
let userInitiatedQueue = DispatchQueue.global(qos: .userInitiated)
let userInteractiveQueue = DispatchQueue.global(qos: .userInteractive)
let utilityQueue = DispatchQueue.global(qos: .utility)

//3.Ïª§Ïä§ÌÖÄÌÅê
//Í∏∞Î≥∏ ÏÑ§Ï†ïÏùÄ serial, Îã®, concurrentÎ°ú ÏÑ§Ï†ïÎèÑ Í∞ÄÎä•ÌïòÎã§
let privateQueue = DispatchQueue(label: "mySerialQueue")



/*==============================================================================
‚ú®‚ú®‚ú®‚ú® GDC  ÏÇ¨Ïö©Ïãú Ï£ºÏùòÏÇ¨Ìï≠ ‚ú®‚ú®‚ú®‚ú®
 1. UI  Í¥ÄÎ†® ÏûëÏóÖÏùÄ Î©îÏù∏Ïä§Î†àÎìúÏóêÏÑú ÌïúÎã§.
 2.‚≠êÔ∏èÎπÑÎèôÍ∏∞Ìï®ÏàòÎäî returnÏù¥ ÏïÑÎãå ÏΩúÎ∞±Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï¥Ïïº ÌïúÎã§.
        1.  returnÏù¥ ÏïÑÎãå ÏΩúÎ∞±Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï¥ÏÑú ÎÅùÎÇòÎäî ÏãúÏ†êÏùÑ ÏïåÎ†§Ï§òÏïº ÌïúÎã§.
            [=> return ÏùÑ ÏÇ¨Ïö©ÌïòÎ©¥ ÏïàÎêòÎäî Ïù¥Ïú†?
                    :Î©îÏù∏Ïä§Î†àÎìúÏóêÏÑú Îã§Î•∏ Ïä§Î†àÎìúÎ°ú ÏûëÏóÖÏùÑ ÏãúÌÇ§Í≥†, Î∞îÎ°ú returnÌï¥Î≤ÑÎ¶¨Í∏∞ ÎïåÎ¨∏Ïóê Î¨¥Ï°∞Í±¥ nilÎ°ú Î∞òÌôòÎêúÎã§. Îî∞ÎùºÏÑú ÏΩúÎ∞±Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï¥ÏÑú ÏûëÏóÖÏù¥ ÎÅùÎÇòÎäî ÏãúÏ†êÏùÑ Ï†ÑÎã¨Î∞õÏïÑÏïº ÌïúÎã§.]
        2. Ïª¥ÌîåÎ¶¨ÏÖòÌï¥Îì§Îü¨Ïùò Ï°¥Ïû¨ Ïù¥Ïú†?
 3. weak, strong Ï∫°Ï≤ò Ï£ºÏùò
 ==============================================================================*/

//‚≠êÔ∏è1. UI  Í¥ÄÎ†® ÏûëÏóÖÏùÄ Î©îÏù∏Ïä§Î†àÎìúÏóêÏÑú ÌïúÎã§.
var imageView : UIImageView? = nil

let url = URL(string: "https://bit.ly/32ps0DI")!

/*URLSessionÏûêÏ≤¥Í∞Ä ÎÇ¥Î∂ÄÏ†ÅÏúºÎ°ú globalQueueÏïàÏóêÏÑú ÎèôÏûëÌïòÍ≥† ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê UIÏûëÏóÖÏùÑ Ìï† ÎïåÎäî mainQueueÏóêÏÑú ÏûëÏóÖÌïòÎèÑÎ°ù Ìï¥Ï§ÄÎã§.*/

URLSession.shared.dataTask(with: url){ (data, response, error) in
    if let error = error{
        print("ÏóêÎü¨ÏûàÏùå")
    }
    guard let imageData = data else { return }
    
    //Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏßÄÍ≥† Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôò
    let photoImage = UIImage(data: imageData)
    
    // UIÍ¥ÄÎ†® ÏûëÏóÖÏùÄ DispatchQueue.main  ÏóêÏÑú ÌïúÎã§.
    DispatchQueue.main.async {
        imageView?.image = photoImage
    }
}.resume()


//2.‚≠êÔ∏èÎπÑÎèôÍ∏∞Ìï®ÏàòÎäî returnÏù¥ ÏïÑÎãå ÏΩúÎ∞±Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï¥Ïïº ÌïúÎã§.
//ÏùºÎ∞òÏ†ÅÏúºÎ°ú, ÏΩúÎ∞±Ìï®ÏàòÏùò Ìï®ÏàòÎ™ÖÏùÑ üíécompletionHandlerüíé ÎùºÍ≥† Ïπ≠ÌïúÎã§.
//1. func properlyGetImages(with urlString : String Î•º Ïã§ÌñâÏùÑ ÌïòÍ≥†,
//2. Ïã§ÌñâÌïòÍ≥† ÎÇòÏò® Í∞íÏúºÎ°ú callback ÌÅ¥Î°úÏ†Ä Ìï®ÏàòÎ•º Ïã§ÌñâÌïòÍ≤†Îã§.
func properlyGetImages(with urlString : String, completionHandler: @escaping (UIImage? ) -> Void) {
    let url = URL(string: urlString)!    //urlStringÏñ¥ÎîîÏÑú Í∞ÄÏ†∏ÏôîÏßÄ..
    
    var photoImage: UIImage? = nil
    
    URLSession.shared.dataTask(with: url) { (data, response, error ) in
        if error != nil{
            print("ÏóêÎü¨ÏûàÏùå : \(error!)")
        }
        //ÏòµÏÖîÎÑê Î∞îÏù∏Îî©
        guard let imageData = data else { return }
        
        //Îç∞Ïù¥ÌÑ∞Î•º UIImage ÌÉÄÏûÖÏúºÎ°ú Î≥ÄÌòï
        photoImage = UIImage(data: imageData)
        
        //ÏΩúÎ∞±Ìï®ÏàòÏã§Ìñâ
        completionHandler(photoImage)
    }.resume()
}


//Ïã§Ìñâ
properlyGetImages(with: "https://bit.ly/32ps0DI") { image  in
    DispatchQueue.main.async {
        
    }
}


//‚≠êÔ∏è3. ÎπÑÎèôÍ∏∞Ìï®Ïàò ÏÇ¨Ïö©Ïãú Î©îÎ™®Î¶¨ÎàÑÏàòÍ∞Ä ÏÉùÍ∏∏ Ïàò ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê weak selfÎ•º Ï£ºÎ°ú ÏÇ¨Ïö©ÌïúÎã§.
class ViewController : UIViewController {
    var name: String = "ÎπÑÎèôÍ∏∞ Î∑∞Ïª®Ìä∏Î°§Îü¨!!"
    
    func doSomething(){
        DispatchQueue.global().async { [weak self] in
            guard let weakSelf = self else { return }  //self Í∞Ä nil Ïù¥Î©¥ guardÎ¨∏ÏóêÏÑú Î∞îÎ°ú returnÌï¥Î≤ÑÎ†§ÏÑú Ï∂úÎ†•Ïù¥ ÏïàÎê®
            sleep(3)
            print("Í∏ÄÎ°úÎ≤åÌÅêÏóêÏÑú Ï∂úÎ†•ÌïòÍ∏∞ : \(weakSelf.name)")  //self(ViewController) Í∞Ä ÏÇ¨ÎùºÏ°åÏúºÎ©¥ print ÏïàÌï®
        }
    }
    deinit{
        print("\(name) Î©îÎ™®Î¶¨ Ìï¥Ï†ú ")
    }
}

func localScopeFunction1(){
    let vc = ViewController()
    vc.doSomething()
}

localScopeFunction1()
//ÎπÑÎèôÍ∏∞ Î∑∞Ïª®Ìä∏Î°§Îü¨!! Î©îÎ™®Î¶¨ Ìï¥Ï†ú Îßå Ï∂úÎ†•ÎêòÏñ¥ÏïºÌïúÎã§.

//‚≠êÔ∏è4.ÎèôÍ∏∞Ìï®ÏàòÎ•º ÎπÑÎèôÍ∏∞Ìï®ÏàòÎ°ú Î≥ÄÌòï
// -- ÎèôÍ∏∞Ìï®Ïàò --
func longtimePrint(name: String) -> String{
    print("ÌîÑÎ¶∞Ìä∏ - 1")
    sleep(1)
    print("ÌîÑÎ¶∞Ìä∏ - 2")
    sleep(2)
    print("ÌîÑÎ¶∞Ìä∏ - 3")
    sleep(3)
    print("ÌîÑÎ¶∞Ìä∏ - 4")
    sleep(4)
    return "ÏûëÏóÖÏ¢ÖÎ£å"
}

// -- ÎπÑÎèôÍ∏∞Ìï®Ïàò --
//returnÌòïÏù¥ ÏûàÎäî Í≤ΩÏö∞ÏóêÎäî Ï∂úÎ†•Í∞í Ï†ÑÎã¨ÌïòÍ∏∞ ÏúÑÌï¥ÏÑú closure Î°ú ÏÑ§Í≥ÑÎ•º ÌïúÎã§ ( Ìï®ÏàòÎ™ÖÏùÄ completionHandler)
func asyncLongtimePrint(name : String, completionHandler: @escaping (String) -> Void) {
    DispatchQueue.global().async {
        let n = longtimePrint(name: name)
        completionHandler(n)
    }
}


asyncLongtimePrint(name: "Ïû°Ïä§"){ (result) in
    print(result)
}
//< ÎπÑÎèôÍ∏∞Ï†ÅÏúºÎ°ú Íµ¨ÌòÑÎêú Î©îÏÜåÎìú >
// URLSession : ÎÇ¥Î∂ÄÏ†ÅÏúºÎ°ú ÎπÑÎèôÍ∏∞Î°ú Ï≤òÎ¶¨ÎêòÏñ¥ÏûàÎã§. Î¨¥Ï°∞Í±¥ Îã§Î•∏ Ïä§Î†àÎìúÎ°ú taskÎ•º Î≥¥ÎÇ∏Îã§.( Í∏∞Îã§Î¶¨ÏßÄ ÏïäÎäîÎã§.)


/*==============================================================================
Async/ Await
 ==============================================================================*/
func longtimePrint(completionHandler: @escaping (Int) -> Void){
    //Í∏∞Ï°¥ÏóêÎäî Ïù¥Î†áÍ≤å ÎπÑÎèôÍ∏∞Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨
    DispatchQueue.global().async {
        print("aync/await ÌîÑÎ¶∞Ìä∏ 1 ")
        sleep(1)
        print("aync/await ÌîÑÎ¶∞Ìä∏ 2 ")
        sleep(1)
        print("aync/await ÌîÑÎ¶∞Ìä∏ 3 ")
        sleep(1)
        print("aync/await ÌîÑÎ¶∞Ìä∏ 4 ")
        completionHandler(7)
    }
}

//Í∏∞Ï°¥Ïùò Îì§Ïó¨Ïì∞Í∏∞Ïùò Î∂àÌé∏Ìï®Ïù¥ ÏûàÎäî ÏΩîÎìú
func linkedPrint( completionHandler : @escaping (Int) -> Void){
    longtimePrint { num in
        longtimePrint { num in
            longtimePrint { num in
                longtimePrint { num in
                    completionHandler(num)  //Î™®Îì† ÎπÑÎèôÍ∏∞ Ìï®ÏàòÏùò Ï¢ÖÎ£åÏãúÏ†ê
                }
            }
        }
    }
}

//async/ await  ÏÇ¨Ïö©Ìïú ÏΩîÎìú==============================================
//asyncÎ•º Î∂ôÏù¥Î©¥ ÏïåÏïÑÏÑú ÎπÑÎèôÍ∏∞ ÏΩîÎìúÎ°ú Î≥ÄÌôòÌïòÍ≤†Îã§ ÌïòÎäî Í≤É.
func longtimeAsyncAwait() async -> Int{
    print("aync/await ÌîÑÎ¶∞Ìä∏ 1 ")
    sleep(1)
    print("aync/await ÌîÑÎ¶∞Ìä∏ 2 ")
    sleep(1)
    print("aync/await ÌîÑÎ¶∞Ìä∏ 3 ")
    sleep(1)
    print("aync/await ÌîÑÎ¶∞Ìä∏ 4 ")
    return 7
}

//Ïã§Ï†ú Ïã§Ìñâ Ìï®Ïàò(ex. longtimeAsyncAwait())  ÏïûÏóê awaitÎ•º Î∂ôÏó¨ÏÑú Ìï®Ïàò Ï¢ÖÎ£åÍπåÏßÄ Í∏∞Îã§Î†§Ï§å.
func linkedPrint2() async -> Int{
    _ = await longtimeAsyncAwait()
    _ = await longtimeAsyncAwait()
    _ = await longtimeAsyncAwait()
    _ = await longtimeAsyncAwait()
    _ = await longtimeAsyncAwait()
    return 7
}

print("‚≠êÔ∏èThread-safe ÌïòÎèÑÎ°ù Ï≤òÎ¶¨ÌïòÎäî Î∞©Î≤ï‚≠êÔ∏è ")
//‚≠êÔ∏èThread-safe ÌïòÎèÑÎ°ù Ï≤òÎ¶¨ÌïòÎäî Î∞©Î≤ï‚≠êÔ∏è
//ÎèôÏãúÌÅêÏóêÏÑú ÏßÅÎ†¨ÌÅêÎ°ú Î≥¥ÎÇ¥Í∏∞
//Î∞∞Ïó¥ÏùÄ Ïó¨Îü¨ ThreadÏóêÏÑú ÎèôÏãúÏóê Ï†ëÍ∑ºÌïòÎ©¥ Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌï† Ïàò ÏûàÎã§.
var array = [String]()

let serialQueue1 = DispatchQueue(label: "serialQ")

for i in 1...20 {
    DispatchQueue.global().async {
        print("\(i)")
        array.append("\(i)")      // <- ÎèôÏãúÌÅêÏóêÏÑú Ïã§ÌñâÌïòÎ©¥ Ïó¨Îü¨ Ïä§Î†àÎìúÏóêÏÑú ÎèôÏãúÏóê Î©îÎ™®Î¶¨Ïóê Ï†ëÍ∑ºÌï¥ÏÑú ÏõêÌïòÎäî Ï∂úÎ†•Ïù¥ Ï†úÎåÄÎ°ú ÏïàÎê† Ïàò ÏûàÎã§.
        
//        serialQueue.async {    //serialQueue Î°ú Î≥¥ÎÇ¥ÏÑú thread-safe ÌïòÎèÑÎ°ù Ï≤òÎ¶¨Ìï¥Ï§ÄÎã§.
//            array.append("\(i)")
//        }
    }
}


DispatchQueue.main.asyncAfter(deadline: .now() + 5){
    print(array)
}
